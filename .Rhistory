remotes::install_github("paulc91/shinyauthr")
shiny::runApp()
runApp()
runApp()
runApp()
data <- read.csv("~/r-shiny/data/trans.csv",sep = ",")
runApp()
my_data <- data %>%
filter(data$InvoiceDate >= 2010-01-01 & data$InvoiceDate <= 2010-01-08)
my_data <- data %>%
filter(data$InvoiceDate >= "2010-01-01" & data$InvoiceDate <= "2010-01-08")
summary(data)
data$InvoiceDate <- as.Date(data$InvoiceDate, format = "%Y-%m-%d")
summary(data)
my_data <- data %>%
filter(InvoiceDate >= "2010-01-01" & InvoiceDate <= "2010-01-08")
my_data <- data %>%
filter(InvoiceDate >= 2010-01-01 & InvoiceDate <= 2010-01-08)
my_data <- data %>%
filter(data$InvoiceDate >= 2010-01-01 & data$InvoiceDate <= 2010-01-08)
my_data <- data %>%
select(InvoiceDate, UnitPrice)%>%
filter(between(InvoiceDate, as.Date("2010-01-01"),as.Date("2010-01-08")))
my_data <- data %>%
select(InvoiceDate, UnitPrice)%>%
filter(InvoiceDate >= "2010-01-01" & InvoiceDate <="2010-01-08")
my_data <- data %>%
select(InvoiceDate, UnitPrice)%>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <="2010-12-08")
my_data <- data %>%
filter(data$InvoiceDate >= 2010-12-01 & data$InvoiceDate <= 2010-12-08)
my_data <- data %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tr <- read.transactions('~/r-shiny/data/market_basket_transactions.csv',
format = 'basket',
sep = ',')
library(arules)
library(arulesViz)
library(tidyverse)
library(readxl)
library(knitr)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
library(RColorBrewer)
tr <- read.transactions('~/r-shiny/data/market_basket_transactions.csv',
format = 'basket',
sep = ',')
association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8, maxlen=10))
inspect(association.rules[1:10])
subset.rules <- which(colSums(is.subset(association.rules, association.rules)) > 1)
length(subset.rules)
subset.association.rules. <- association.rules[-subset.rules]
metal.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8),
appearance=list(default='lhs', rhs="METAL"))
subRules <- association.rules[quality(association.rules)$confidence > 0.8]
plot(subRules)
plotly_arules(subRules)
top10subRules <- head(subRules, n = 10, by = "confidence")
top10subRules
inspect(top10subRules)
plot(top10subRules, method = "graph",  engine = "htmlwidget")
subRules2<-head(subRules, n=20, by="lift")
plot(subRules2, method="paracoord")
shiny::runApp()
itemFrequencyPlot(tr, topN=20, type="absolute",
col=brewer.pal(8, 'Pastel2'),
main="Item Frequency Plot")
runApp()
runApp()
tr <- read.transactions('~/r-shiny/data/market_basket_transactions.csv',
format = 'basket',
sep = ',')
tr <- read.transactions('~/r-shiny/data/market_basket_transactions.csv',
quote = FALSE,
format = 'basket',
sep = ',')
tr <- read.transactions('~/r-shiny/data/market_basket_transactions.csv',
quote = "",
format = 'basket',
sep = ',')
tr <- read.transactions('~/r-shiny/data/market_basket_transactions.csv',
format = 'basket',
sep = ',')
tr
tr <- read.transactions('~/r-shiny/data/market_basket_transactions.csv',
quote="",
format = 'basket',
sep = ',')
tr
runApp()
runApp()
runApp()
tr <- read.transactions('~/r-shiny/data/market_basket_transactions.csv',
format = 'basket',
quote="",
sep = ',')
itemFrequencyPlot(tr, topN=20, type="absolute",
col=brewer.pal(8, 'Pastel2'),
main="Item Frequency Plot")
runApp()
runApp()
data <- read.csv("~/r-shiny/data/trans.csv",
sep = ",")
data$InvoiceDate <- as.Date(data$InvoiceDate, format = "%Y-%m-%d")
df1 <- data %>%
group_by(InvoiceDate) %>%
summarise(UnitPrice=sum(UnitPrice)) %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08")
data$InvoiceDate <- as.Date(data$InvoiceDate, format = "%Y-%m-%d")
df1 <- data %>%
group_by(InvoiceDate) %>%
summarise(UnitPrice=sum(UnitPrice)) %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08")
df1 <- data %>%
group_by(InvoiceDate)
df1
df1 <- data %>%
group_by(InvoiceDate) %>%
summarise(UnitPrice=sum(UnitPrice))
df1
df1 <- data %>%
group_by(InvoiceDate) %>%
summarise(UnitPrice=sum(UnitPrice)) %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08")
df1 <- data %>%
group_by(InvoiceDate)
df1 <- data %>%
select(InvoiceDate, UnitPrice)
group_by(InvoiceDate)
df1 <- data %>%
select(InvoiceDate, UnitPrice) %>%
group_by(InvoiceDate)
df1
df1 <- data %>%
select(InvoiceDate, UnitPrice) %>%
group_by(InvoiceDate) %>%
summarise(UnitPrice=sum(UnitPrice))
df1
data %>%
group_by(InvoiceDate) %>%
summarise(SalesAmount=sum(UnitPrice))
data %>%
group_by(InvoiceDate)
data %>%
select(InvoiceDate, UnitPrice) %>%
group_by(InvoiceDate)
data %>%
select(InvoiceDate, UnitPrice) %>%
group_by(InvoiceDate) %>%
summarise(UnitPrice=sum(UnitPrice)) %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08")
summary(data)
aggregate(data$UnitPrice, by=list(data$InvoiceDate), sum)
data %>%
select(InvoiceDate, UnitPrice
)
data %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08")
data %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08") %>%
aggregate(data$UnitPrice, by=list(data$InvoiceDate), sum)
data %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08") %>%
aggregate(UnitPrice, by=list(InvoiceDate), sum)
data %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08") %>%
select(InvoiceDate, UnitPrice) %>%
aggregate(UnitPrice, by=list(InvoiceDate), sum)
data %>%
select(InvoiceDate, UnitPrice) %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08") %>%
aggregate(UnitPrice, by=list(InvoiceDate), sum)
data %>%
select(InvoiceDate, UnitPrice) %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08")
df1 <- data %>%
select(InvoiceDate, UnitPrice) %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08")
aggregate(df1$UnitPrice, by=list(df1$InvoiceDate), sum)
runApp()
df1 <- data %>%
select(InvoiceDate, UnitPrice) %>%
filter(InvoiceDate >= "2010-12-01" & InvoiceDate <= "2010-12-08")
df1_sum <- aggregate(df1$UnitPrice, by=list(df1$InvoiceDate), sum)
runApp()
runApp()
df1_sum
colnames(df1_sum) <- c("InvoiceDate", UnitPrice)
colnames(df1_sum) <- c("InvoiceDate", "UnitPrice")
df1_sum
runApp()
runApp()
runApp()
runApp()
library(plotly)
runApp()
runApp()
runApp()
runApp()
library(visNetwork)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny); runApp('app2.R')
runApp('app2.R')
saveRDS(user_base, "user_base.rds")
# dataframe that holds usernames, passwords and other user data
user_base <- data.frame(
user = c("user1"),
password = sapply(c("pass1"), sodium::password_store),
permissions = c("admin"),
name = c("User One"),
stringsAsFactors = FALSE,
row.names = NULL
)
saveRDS(user_base, "user_base.rds")
runApp('app2.R')
runApp('app2.R')
library(shiny); runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
source('app2.R')
source('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
shiny::runApp()
saveRDS(user_base, "user_base.rds")
source('~/r-shiny/rds.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.csv("~/r-shiny/data/trans.csv",
sep = ",")
data %>%
{.[,6]*.[,8]}
View(data)
data$TotalPrice <- data %>%
{.[,6]*.[,8]}
aggregate(data$TotalPrice, by=list(Category=data$CustomerID), FUN=sum)
topspend <- aggregate(data$TotalPrice,
by=list(Category=data$CustomerID), FUN=sum)
View(topspend)
sort(topspend$x,decreasing=TRUE)
head(sort(topspend$x,decreasing=TRUE))
head(topspend[order(topspend$x, decreasing= T),], n = 10)
runApp()
topcust <- head(topspend[order(topspend$x, decreasing= T),], n = 10)
p_bar_1 <- ggplot(topcust, aes(x=Category, y=x, fill=Category)) +
geom_bar(stat="Identity") +
geom_text(aes(label=x), vjust=-0.3) +
theme_minimal()
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=Category, y=x, fill=Category)) +
geom_bar(stat="Identity")
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
head(topspend[order(topspend$x, decreasing= T),], n = 10)
toString(topcust$Category)
topcust$Category <- toString(topcust$Category)
p_bar_1 <- ggplot(topcust, aes(x=Category, y=x, fill=Category)) +
geom_bar(stat="Identity")
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
View(topcust)
topcust <- head(topspend[order(topspend$x, decreasing= T),], n = 10)
View(topcust)
as.character(topcust$Category)
topcust$Category <- as.character(topcust$Category)
View(topcust)
View(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=Category, y=x, fill=Category)) +
geom_bar(stat="Identity")
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=reorder(Category, -x), y=x, fill=Category)) +
geom_bar(stat="Identity")
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=reorder(Category, x), y=x, fill=Category)) +
geom_bar(stat="Identity")
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=reorder(Category, x), y=x, fill=Category)) +
geom_bar(stat="Identity") +
geom_text(aes(label=x), vjust=-0.3) +
theme_minimal()
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=reorder(Category, x), y=x, fill=Category)) +
geom_bar(stat="Identity") +
theme_minimal()
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=reorder(Category, x), y=x, fill=Category)) +
geom_bar(stat="Identity")
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=reorder(Category, x), y=x, fill=Category)) +
geom_bar(stat="Identity") +
theme_bw()
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=reorder(Category, x), y=x, fill=Category)) +
geom_bar(stat="Identity") +
theme_classic()
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=reorder(Category, x), y=x, fill=Category)) +
geom_bar(stat="Identity") +
theme_light()
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=reorder(Category, x), y=x, fill=Category)) +
geom_bar(stat="Identity") +
theme_gray()
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
p_bar_1 <- ggplot(topcust, aes(x=reorder(Category, x), y=x, fill=Category)) +
geom_bar(stat="Identity") +
theme_dark()
p_bar_1 <- p_bar_1 + coord_flip()
ggplotly(p_bar_1)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
debugSource('~/r-shiny/main.R')
data <- read.csv("~/r-shiny/data/trans.csv",
sep = ",")
View(data)
runApp()
